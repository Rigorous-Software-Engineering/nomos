# Generated from Nomos.g4 by ANTLR 4.9
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\66")
        buf.write("\u0173\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17")
        buf.write("\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\23")
        buf.write("\3\23\7\23\u00d1\n\23\f\23\16\23\u00d4\13\23\3\23\3\23")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\5\35")
        buf.write("\u0103\n\35\3\35\6\35\u0106\n\35\r\35\16\35\u0107\3\35")
        buf.write("\3\35\6\35\u010c\n\35\r\35\16\35\u010d\5\35\u0110\n\35")
        buf.write("\3\35\3\35\5\35\u0114\n\35\3\35\6\35\u0117\n\35\r\35\16")
        buf.write("\35\u0118\5\35\u011b\n\35\3\36\6\36\u011e\n\36\r\36\16")
        buf.write("\36\u011f\3\37\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$")
        buf.write("\3$\3%\3%\3&\3&\3\'\3\'\3\'\3(\3(\3)\3)\3)\3*\3*\3*\3")
        buf.write("+\3+\3+\3,\3,\3,\3-\3-\3-\3.\3.\3/\3/\3/\3/\3\60\3\60")
        buf.write("\3\60\3\61\3\61\3\62\3\62\3\63\6\63\u0155\n\63\r\63\16")
        buf.write("\63\u0156\3\63\3\63\3\64\3\64\3\64\3\64\7\64\u015f\n\64")
        buf.write("\f\64\16\64\u0162\13\64\3\64\3\64\3\64\3\64\3\64\3\65")
        buf.write("\3\65\3\65\3\65\7\65\u016d\n\65\f\65\16\65\u0170\13\65")
        buf.write("\3\65\3\65\4\u00d2\u0160\2\66\3\3\5\4\7\5\t\6\13\7\r\b")
        buf.write("\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22")
        buf.write("#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\35")
        buf.write("9\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62")
        buf.write("c\63e\64g\65i\66\3\2\b\3\2\62;\4\2GGgg\4\2--//\5\2//C")
        buf.write("\\c|\5\2\13\f\17\17\"\"\4\2\f\f\17\17\2\u017e\2\3\3\2")
        buf.write("\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2")
        buf.write("\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2")
        buf.write("\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35")
        buf.write("\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2")
        buf.write("\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2")
        buf.write("\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2")
        buf.write("\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2")
        buf.write("\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2")
        buf.write("\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3")
        buf.write("\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_")
        buf.write("\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2")
        buf.write("i\3\2\2\2\3k\3\2\2\2\5s\3\2\2\2\7\u0081\3\2\2\2\t\u0088")
        buf.write("\3\2\2\2\13\u008e\3\2\2\2\r\u009d\3\2\2\2\17\u00aa\3\2")
        buf.write("\2\2\21\u00b0\3\2\2\2\23\u00b8\3\2\2\2\25\u00ba\3\2\2")
        buf.write("\2\27\u00bc\3\2\2\2\31\u00be\3\2\2\2\33\u00c0\3\2\2\2")
        buf.write("\35\u00c2\3\2\2\2\37\u00c4\3\2\2\2!\u00c6\3\2\2\2#\u00ca")
        buf.write("\3\2\2\2%\u00ce\3\2\2\2\'\u00d7\3\2\2\2)\u00dd\3\2\2\2")
        buf.write("+\u00e4\3\2\2\2-\u00e8\3\2\2\2/\u00f1\3\2\2\2\61\u00f9")
        buf.write("\3\2\2\2\63\u00fb\3\2\2\2\65\u00fd\3\2\2\2\67\u00ff\3")
        buf.write("\2\2\29\u0102\3\2\2\2;\u011d\3\2\2\2=\u0121\3\2\2\2?\u0124")
        buf.write("\3\2\2\2A\u0126\3\2\2\2C\u0128\3\2\2\2E\u012a\3\2\2\2")
        buf.write("G\u012c\3\2\2\2I\u012e\3\2\2\2K\u0130\3\2\2\2M\u0132\3")
        buf.write("\2\2\2O\u0135\3\2\2\2Q\u0137\3\2\2\2S\u013a\3\2\2\2U\u013d")
        buf.write("\3\2\2\2W\u0140\3\2\2\2Y\u0143\3\2\2\2[\u0146\3\2\2\2")
        buf.write("]\u0148\3\2\2\2_\u014c\3\2\2\2a\u014f\3\2\2\2c\u0151\3")
        buf.write("\2\2\2e\u0154\3\2\2\2g\u015a\3\2\2\2i\u0168\3\2\2\2kl")
        buf.write("\7k\2\2lm\7o\2\2mn\7r\2\2no\7q\2\2op\7t\2\2pq\7v\2\2q")
        buf.write("r\7\"\2\2r\4\3\2\2\2st\7i\2\2tu\7g\2\2uv\7t\2\2vw\7o\2")
        buf.write("\2wx\7c\2\2xy\7p\2\2yz\7a\2\2z{\7e\2\2{|\7t\2\2|}\7g\2")
        buf.write("\2}~\7f\2\2~\177\7k\2\2\177\u0080\7v\2\2\u0080\6\3\2\2")
        buf.write("\2\u0081\u0082\7e\2\2\u0082\u0083\7q\2\2\u0083\u0084\7")
        buf.write("o\2\2\u0084\u0085\7r\2\2\u0085\u0086\7c\2\2\u0086\u0087")
        buf.write("\7u\2\2\u0087\b\3\2\2\2\u0088\u0089\7o\2\2\u0089\u008a")
        buf.write("\7p\2\2\u008a\u008b\7k\2\2\u008b\u008c\7u\2\2\u008c\u008d")
        buf.write("\7v\2\2\u008d\n\3\2\2\2\u008e\u008f\7u\2\2\u008f\u0090")
        buf.write("\7r\2\2\u0090\u0091\7g\2\2\u0091\u0092\7g\2\2\u0092\u0093")
        buf.write("\7e\2\2\u0093\u0094\7j\2\2\u0094\u0095\7a\2\2\u0095\u0096")
        buf.write("\7e\2\2\u0096\u0097\7q\2\2\u0097\u0098\7o\2\2\u0098\u0099")
        buf.write("\7o\2\2\u0099\u009a\7c\2\2\u009a\u009b\7p\2\2\u009b\u009c")
        buf.write("\7f\2\2\u009c\f\3\2\2\2\u009d\u009e\7j\2\2\u009e\u009f")
        buf.write("\7q\2\2\u009f\u00a0\7v\2\2\u00a0\u00a1\7g\2\2\u00a1\u00a2")
        buf.write("\7n\2\2\u00a2\u00a3\7a\2\2\u00a3\u00a4\7t\2\2\u00a4\u00a5")
        buf.write("\7g\2\2\u00a5\u00a6\7x\2\2\u00a6\u00a7\7k\2\2\u00a7\u00a8")
        buf.write("\7g\2\2\u00a8\u00a9\7y\2\2\u00a9\16\3\2\2\2\u00aa\u00ab")
        buf.write("\7n\2\2\u00ab\u00ac\7w\2\2\u00ac\u00ad\7p\2\2\u00ad\u00ae")
        buf.write("\7c\2\2\u00ae\u00af\7t\2\2\u00af\20\3\2\2\2\u00b0\u00b1")
        buf.write("\7d\2\2\u00b1\u00b2\7k\2\2\u00b2\u00b3\7r\2\2\u00b3\u00b4")
        buf.write("\7g\2\2\u00b4\u00b5\7f\2\2\u00b5\u00b6\7c\2\2\u00b6\u00b7")
        buf.write("\7n\2\2\u00b7\22\3\2\2\2\u00b8\u00b9\7\60\2\2\u00b9\24")
        buf.write("\3\2\2\2\u00ba\u00bb\7x\2\2\u00bb\26\3\2\2\2\u00bc\u00bd")
        buf.write("\7z\2\2\u00bd\30\3\2\2\2\u00be\u00bf\7u\2\2\u00bf\32\3")
        buf.write("\2\2\2\u00c0\u00c1\7f\2\2\u00c1\34\3\2\2\2\u00c2\u00c3")
        buf.write("\7q\2\2\u00c3\36\3\2\2\2\u00c4\u00c5\7h\2\2\u00c5 \3\2")
        buf.write("\2\2\u00c6\u00c7\7r\2\2\u00c7\u00c8\7q\2\2\u00c8\u00c9")
        buf.write("\7u\2\2\u00c9\"\3\2\2\2\u00ca\u00cb\7p\2\2\u00cb\u00cc")
        buf.write("\7g\2\2\u00cc\u00cd\7i\2\2\u00cd$\3\2\2\2\u00ce\u00d2")
        buf.write("\5? \2\u00cf\u00d1\13\2\2\2\u00d0\u00cf\3\2\2\2\u00d1")
        buf.write("\u00d4\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d2\u00d0\3\2\2\2")
        buf.write("\u00d3\u00d5\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d5\u00d6\5")
        buf.write("A!\2\u00d6&\3\2\2\2\u00d7\u00d8\7k\2\2\u00d8\u00d9\7p")
        buf.write("\2\2\u00d9\u00da\7r\2\2\u00da\u00db\7w\2\2\u00db\u00dc")
        buf.write("\7v\2\2\u00dc(\3\2\2\2\u00dd\u00de\7q\2\2\u00de\u00df")
        buf.write("\7w\2\2\u00df\u00e0\7v\2\2\u00e0\u00e1\7r\2\2\u00e1\u00e2")
        buf.write("\7w\2\2\u00e2\u00e3\7v\2\2\u00e3*\3\2\2\2\u00e4\u00e5")
        buf.write("\7x\2\2\u00e5\u00e6\7c\2\2\u00e6\u00e7\7t\2\2\u00e7,\3")
        buf.write("\2\2\2\u00e8\u00e9\7t\2\2\u00e9\u00ea\7g\2\2\u00ea\u00eb")
        buf.write("\7s\2\2\u00eb\u00ec\7w\2\2\u00ec\u00ed\7k\2\2\u00ed\u00ee")
        buf.write("\7t\2\2\u00ee\u00ef\7g\2\2\u00ef\u00f0\7u\2\2\u00f0.\3")
        buf.write("\2\2\2\u00f1\u00f2\7g\2\2\u00f2\u00f3\7p\2\2\u00f3\u00f4")
        buf.write("\7u\2\2\u00f4\u00f5\7w\2\2\u00f5\u00f6\7t\2\2\u00f6\u00f7")
        buf.write("\7g\2\2\u00f7\u00f8\7u\2\2\u00f8\60\3\2\2\2\u00f9\u00fa")
        buf.write("\7-\2\2\u00fa\62\3\2\2\2\u00fb\u00fc\7/\2\2\u00fc\64\3")
        buf.write("\2\2\2\u00fd\u00fe\7,\2\2\u00fe\66\3\2\2\2\u00ff\u0100")
        buf.write("\7\61\2\2\u01008\3\2\2\2\u0101\u0103\7/\2\2\u0102\u0101")
        buf.write("\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u0105\3\2\2\2\u0104")
        buf.write("\u0106\t\2\2\2\u0105\u0104\3\2\2\2\u0106\u0107\3\2\2\2")
        buf.write("\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u010f\3")
        buf.write("\2\2\2\u0109\u010b\7\60\2\2\u010a\u010c\t\2\2\2\u010b")
        buf.write("\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u010b\3\2\2\2")
        buf.write("\u010d\u010e\3\2\2\2\u010e\u0110\3\2\2\2\u010f\u0109\3")
        buf.write("\2\2\2\u010f\u0110\3\2\2\2\u0110\u011a\3\2\2\2\u0111\u0113")
        buf.write("\t\3\2\2\u0112\u0114\t\4\2\2\u0113\u0112\3\2\2\2\u0113")
        buf.write("\u0114\3\2\2\2\u0114\u0116\3\2\2\2\u0115\u0117\t\2\2\2")
        buf.write("\u0116\u0115\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u0116\3")
        buf.write("\2\2\2\u0118\u0119\3\2\2\2\u0119\u011b\3\2\2\2\u011a\u0111")
        buf.write("\3\2\2\2\u011a\u011b\3\2\2\2\u011b:\3\2\2\2\u011c\u011e")
        buf.write("\t\5\2\2\u011d\u011c\3\2\2\2\u011e\u011f\3\2\2\2\u011f")
        buf.write("\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120<\3\2\2\2\u0121")
        buf.write("\u0122\7$\2\2\u0122\u0123\7$\2\2\u0123>\3\2\2\2\u0124")
        buf.write("\u0125\7}\2\2\u0125@\3\2\2\2\u0126\u0127\7\177\2\2\u0127")
        buf.write("B\3\2\2\2\u0128\u0129\7]\2\2\u0129D\3\2\2\2\u012a\u012b")
        buf.write("\7_\2\2\u012bF\3\2\2\2\u012c\u012d\7*\2\2\u012dH\3\2\2")
        buf.write("\2\u012e\u012f\7+\2\2\u012fJ\3\2\2\2\u0130\u0131\7>\2")
        buf.write("\2\u0131L\3\2\2\2\u0132\u0133\7>\2\2\u0133\u0134\7?\2")
        buf.write("\2\u0134N\3\2\2\2\u0135\u0136\7@\2\2\u0136P\3\2\2\2\u0137")
        buf.write("\u0138\7@\2\2\u0138\u0139\7?\2\2\u0139R\3\2\2\2\u013a")
        buf.write("\u013b\7?\2\2\u013b\u013c\7?\2\2\u013cT\3\2\2\2\u013d")
        buf.write("\u013e\7#\2\2\u013e\u013f\7?\2\2\u013fV\3\2\2\2\u0140")
        buf.write("\u0141\7(\2\2\u0141\u0142\7(\2\2\u0142X\3\2\2\2\u0143")
        buf.write("\u0144\7~\2\2\u0144\u0145\7~\2\2\u0145Z\3\2\2\2\u0146")
        buf.write("\u0147\7#\2\2\u0147\\\3\2\2\2\u0148\u0149\7?\2\2\u0149")
        buf.write("\u014a\7?\2\2\u014a\u014b\7@\2\2\u014b^\3\2\2\2\u014c")
        buf.write("\u014d\7<\2\2\u014d\u014e\7?\2\2\u014e`\3\2\2\2\u014f")
        buf.write("\u0150\7.\2\2\u0150b\3\2\2\2\u0151\u0152\7=\2\2\u0152")
        buf.write("d\3\2\2\2\u0153\u0155\t\6\2\2\u0154\u0153\3\2\2\2\u0155")
        buf.write("\u0156\3\2\2\2\u0156\u0154\3\2\2\2\u0156\u0157\3\2\2\2")
        buf.write("\u0157\u0158\3\2\2\2\u0158\u0159\b\63\2\2\u0159f\3\2\2")
        buf.write("\2\u015a\u015b\7\61\2\2\u015b\u015c\7,\2\2\u015c\u0160")
        buf.write("\3\2\2\2\u015d\u015f\13\2\2\2\u015e\u015d\3\2\2\2\u015f")
        buf.write("\u0162\3\2\2\2\u0160\u0161\3\2\2\2\u0160\u015e\3\2\2\2")
        buf.write("\u0161\u0163\3\2\2\2\u0162\u0160\3\2\2\2\u0163\u0164\7")
        buf.write(",\2\2\u0164\u0165\7\61\2\2\u0165\u0166\3\2\2\2\u0166\u0167")
        buf.write("\b\64\2\2\u0167h\3\2\2\2\u0168\u0169\7\61\2\2\u0169\u016a")
        buf.write("\7\61\2\2\u016a\u016e\3\2\2\2\u016b\u016d\n\7\2\2\u016c")
        buf.write("\u016b\3\2\2\2\u016d\u0170\3\2\2\2\u016e\u016c\3\2\2\2")
        buf.write("\u016e\u016f\3\2\2\2\u016f\u0171\3\2\2\2\u0170\u016e\3")
        buf.write("\2\2\2\u0171\u0172\b\65\2\2\u0172j\3\2\2\2\17\2\u00d2")
        buf.write("\u0102\u0107\u010d\u010f\u0113\u0118\u011a\u011f\u0156")
        buf.write("\u0160\u016e\3\b\2\2")
        return buf.getvalue()


class NomosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    PROGRAM = 18
    INPUT = 19
    OUTPUT = 20
    VARKW = 21
    REQUIRES = 22
    ENSURES = 23
    PLUS = 24
    MINUS = 25
    MULT = 26
    DIV = 27
    NUM = 28
    FUNC = 29
    EMPTYSTR = 30
    LCBR = 31
    RCBR = 32
    LSBR = 33
    RSBR = 34
    LBR = 35
    RBR = 36
    LSS = 37
    LSQ = 38
    GRT = 39
    GRQ = 40
    EQL = 41
    NEQ = 42
    AND = 43
    OR = 44
    NOT = 45
    IMPL = 46
    ASS = 47
    COMMA = 48
    SEMICOLON = 49
    WS = 50
    COMMENT = 51
    LINE_COMMENT = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'import '", "'german_credit'", "'compas'", "'mnist'", "'speech_command'", 
            "'hotel_review'", "'lunar'", "'bipedal'", "'.'", "'v'", "'x'", 
            "'s'", "'d'", "'o'", "'f'", "'pos'", "'neg'", "'input'", "'output'", 
            "'var'", "'requires'", "'ensures'", "'+'", "'-'", "'*'", "'/'", 
            "'\"\"'", "'{'", "'}'", "'['", "']'", "'('", "')'", "'<'", "'<='", 
            "'>'", "'>='", "'=='", "'!='", "'&&'", "'||'", "'!'", "'==>'", 
            "':='", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM", "INPUT", "OUTPUT", "VARKW", "REQUIRES", "ENSURES", 
            "PLUS", "MINUS", "MULT", "DIV", "NUM", "FUNC", "EMPTYSTR", "LCBR", 
            "RCBR", "LSBR", "RSBR", "LBR", "RBR", "LSS", "LSQ", "GRT", "GRQ", 
            "EQL", "NEQ", "AND", "OR", "NOT", "IMPL", "ASS", "COMMA", "SEMICOLON", 
            "WS", "COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "PROGRAM", "INPUT", "OUTPUT", 
                  "VARKW", "REQUIRES", "ENSURES", "PLUS", "MINUS", "MULT", 
                  "DIV", "NUM", "FUNC", "EMPTYSTR", "LCBR", "RCBR", "LSBR", 
                  "RSBR", "LBR", "RBR", "LSS", "LSQ", "GRT", "GRQ", "EQL", 
                  "NEQ", "AND", "OR", "NOT", "IMPL", "ASS", "COMMA", "SEMICOLON", 
                  "WS", "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "Nomos.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


